<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cache on My New Hugo Site</title>
    <link>http://ytlvy.com/tags/cache/</link>
    <description>Recent content in Cache on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Jun 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://ytlvy.com/tags/cache/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>objc runtime method Cache</title>
      <link>http://ytlvy.com/posts/2015-06-08/2015-06-08-objc-runtime-method-cache/</link>
      <pubDate>Mon, 08 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ytlvy.com/posts/2015-06-08/2015-06-08-objc-runtime-method-cache/</guid>
      <description> method cache 更新机制 为了方便函数的查找, objc在运行时,引入了method cache机制,来快速定位函数.method cache的大小是动态更新的,在更新时, 将直接生成新容量的缓存, 并将旧的缓存放入到垃圾队列中,等待时机释放. 而时机的选择, 采用检测每个线程的program counter,来查看是否处于objc_msgSend.如果都不在,则释放.
BOOL ThreadsInMsgSend(void) { for(thread in GetAllThreads()) { uintptr_t pc = thread.GetPC(); if(pc &amp;gt;= objc_msgSend_startAddress &amp;amp;&amp;amp; pc &amp;lt;= objc_msgSend_endAddress) { return YES; } } return NO; } bucket_t *oldCache = class-&amp;gt;cache; class-&amp;gt;cache = malloc(newSize); append(gOldCachesList, oldCache); if(!ThreadsInMsgSend()) { for(cache in gOldCachesList) { free(cache); } gOldCachesList.clear(); }  </description>
    </item>
    
  </channel>
</rss>