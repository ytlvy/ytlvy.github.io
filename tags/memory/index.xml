<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memory on My New Hugo Site</title>
    <link>http://ytlvy.com/tags/memory/</link>
    <description>Recent content in Memory on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Aug 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://ytlvy.com/tags/memory/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C programe memory management</title>
      <link>http://ytlvy.com/posts/2015-08-04/2015-08-04-c-programe-memory-management/</link>
      <pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ytlvy.com/posts/2015-08-04/2015-08-04-c-programe-memory-management/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://casatwy.com/ccheng-xu-de-nei-cun-guan-li.html&#34;&gt;reference&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;c程序的内存管理&#34;&gt;C程序的内存管理&lt;/h2&gt;

&lt;h3 id=&#34;简述&#34;&gt;简述&lt;/h3&gt;

&lt;p&gt;自从自动内存管理嵌入到各种各样的语言之后，我们就很少会去关注这方面的事情了，这些功能的设计者和实现者们为此付出的努力值得我们称赞，期间也涌现了多种不同的内存管理方案。目前大部分语言的主流内存管理方案是Garbage Collector。苹果推出的Auto Reference Count也因为基于编译器自动添加手工计数的代码而带来了更好的性能提升。我在这里总结了一些从上古时代到如今在C程序下进行内存管理的技术。同时，也为你更深入地了解其他语言中内存管理模块的原理提供了知识背景。&lt;/p&gt;

&lt;h3 id=&#34;管理固定大小的内存&#34;&gt;管理固定大小的内存&lt;/h3&gt;

&lt;h4 id=&#34;栈内存&#34;&gt;栈内存&lt;/h4&gt;

&lt;p&gt;栈内存应该是最容易管理的了，只要理解&lt;code&gt;生存域&lt;/code&gt;就能理解占内存的管理方式。生存域就是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int main ()
    {
        int array[] = {1,2,3,4,5};
                              ------------------|
        if ( i &amp;gt; 0 ) {                          |
            ...                                 |
            ...                                 |
        }                                       |
        foo(array);                             |
                                                |
        {                                       |
            int k = 9;        ---               |
            array[1] = k;       |-&amp;gt;k的生存域     |-&amp;gt;array的生存域
            ...               ---               |
        }                                       |
    }                                           |
                                                |
    void foo(int * const number) {              |
        int j = 0;                              |
                              ---               |
        ...                     |               |
        number[2] = j;          |-&amp;gt;j的生存域     |
        ...                     |               |
                              -------------------
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Toll-Free Bridging</title>
      <link>http://ytlvy.com/posts/2015-08-04/2015-08-04-ios-toll-free-bridging/</link>
      <pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ytlvy.com/posts/2015-08-04/2015-08-04-ios-toll-free-bridging/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://gracelancy.com/blog/2014/04/21/toll-free-bridging/&#34;&gt;reference&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toll-free-bridging&#34;&gt;Toll-Free Bridging&lt;/h2&gt;

&lt;h3 id=&#34;什么是-toll-free-bridging&#34;&gt;什么是 Toll-Free Bridging&lt;/h3&gt;

&lt;p&gt;有一些数据类型是能够在 &lt;code&gt;Core Foundation Framework&lt;/code&gt; 和 &lt;code&gt;Foundation Framework&lt;/code&gt; 之间交换使用的。这意味着，对于同一个数据类型，你既可以将其作为参数传入 &lt;code&gt;Core Foundation&lt;/code&gt;函数，也可以将其作为接收者对其发送 &lt;code&gt;Objective-C&lt;/code&gt; 消息（即调用ObjC类方法）。这种在 &lt;code&gt;Core Foundation 和 Foundation&lt;/code&gt; 之间交换使用数据类型的技术就叫 &lt;code&gt;Toll-Free Bridging&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;举例说明，&lt;code&gt;NSString&lt;/code&gt;和&lt;code&gt;CFStringRef&lt;/code&gt;即是一对可以相互转换的数据类型：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// ARC 环境下
// Bridging from ObjC to CF
NSString *hello = @&amp;quot;world&amp;quot;;
CFStringRef world = (__bridge CFStringRef)(hello);
NSLog(@&amp;quot;%ld&amp;quot;, CFStringGetLength(world));

// Bridging from CF to ObjC
CFStringRef hello = CFStringCreateWithCString(kCFAllocatorDefault, &amp;quot;hello&amp;quot;, kCFStringEncodingUTF8);
NSString *world = (__bridge NSString *)(hello);
NSLog(@&amp;quot;%ld&amp;quot;, world.length);
CFRelease(hello);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大部分（但不是所有！）&lt;code&gt;Core Foundation&lt;/code&gt; 和 &lt;code&gt;Foundation&lt;/code&gt; 的数据类型可以使用这个技术相互转换，Apple 的文档里有一个列表（&lt;a href=&#34;https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/Toll-FreeBridgin/Toll-FreeBridgin.html&#34;&gt;传送门&lt;/a&gt;），列出了支持这项技术的数据类型。
MRC 下的 &lt;code&gt;Toll-Free Bridging&lt;/code&gt; 因为不涉及内存管理的转移，可以直接相互 &lt;code&gt;bridge&lt;/code&gt; 而不必使用类似&lt;code&gt;__bridge&lt;/code&gt;修饰字，我们之后再讨论这个问题。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>progress memory map</title>
      <link>http://ytlvy.com/posts/2015-07-06/2015-07-06-progress-memory-map/</link>
      <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ytlvy.com/posts/2015-07-06/2015-07-06-progress-memory-map/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/&#34;&gt;翻译子&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;程序在内存中分布&#34;&gt;程序在内存中分布&lt;/h2&gt;

&lt;p&gt;内存管理是操作系统的核心. 对系统和编程人员来说这都是非常重要的.下面用 32位 系统举例.首先介绍程序如何在内存中分布.&lt;/p&gt;

&lt;h3 id=&#34;虚拟地址空间&#34;&gt;虚拟地址空间&lt;/h3&gt;

&lt;p&gt;在多任务操作系统中, 每个进程拥有自己独立的内存沙箱. 这个沙箱就是指的&lt;code&gt;虚拟地址空间&lt;/code&gt;(virtual address space), 在32位系统中, 就是一块4GB 大小的内存地址块. 这些虚拟地址和物理内存通过&lt;code&gt;page tables&lt;/code&gt;来完成映射, &lt;code&gt;page tables&lt;/code&gt;是由系统核心管理,进程可以进行访问. 一旦虚拟地址被启用, 会应用到所有的程序中, 包括系统核心. 因此虚拟地址的一部分, 需要被划分出来为系统核心保留使用.
&lt;img src=&#34;http://static.duartes.org/img/blogPosts/kernelUserMemorySplit.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这并不意味着核心会固定占用大量的物理内存, 而是说核心需要按照需要动态映射到足够的物理内存即可.核心空间在 &lt;code&gt;page tables&lt;/code&gt;中被标记为被&lt;code&gt;特权码(privilege code)&lt;/code&gt;独占, 因此如果用户程序尝试访问此空间, &lt;code&gt;页面错误&lt;/code&gt;会被出发并抛出. 在 linux 系统中, 核心空间是常驻内存的, 并且所有程序的核心空间是共享的, 总是映射到同一块物理内存. 核心代码和数据,总是可访问, 并随时准备处理&lt;code&gt;interrupts&lt;/code&gt; 或者 系统调用. 相对的用户程序空间块是每个程序独享的, 并在程序切换时, 而随之切换.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://static.duartes.org/img/blogPosts/virtualMemoryInProcessSwitch.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上图中蓝色区域标示, 虚拟地址已经完成映射到实际地址, 白色区域代表还没有完成映射.上例中, 以内存消耗多著名的火狐使用了更多的虚拟地址. 在内存地址中不同的区块代表了不同的内存段: heap, stack, 等等.请注意这些内存段只是简单的内存地址范围, 与&lt;code&gt;Intel-style segments&lt;/code&gt;无关. 下面是linux 系统中标准段分布图:&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>