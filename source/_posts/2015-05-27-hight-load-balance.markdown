---
layout: post
title: "高负载处理"
date: 2015-05-27 12:53:54 +0800
comments: true
categories: Bigdata
---
### 高负载处理
#### 一 应用无状态
>集群节点间session的通信会随着节点的增多而开销增大，因此要想做到应用本身的伸缩性，我们需要保证应用的无状态性

#### 二 有效使用缓存
##### 缓存分类
>浏览器缓存，反向代理缓存，页面缓存，局部页面缓存，对象缓存

##### 应用场景
>安全性较低 更新不频繁

<!--more-->

#### 三 应用拆分
1. 单独的子系统进行扩展和维护 提高系统的扩展性和可维护性，可以有针对性的对压力大的子系统进行水平扩展而不会影响到其它的子系统
2. 子系统之间通信一般有同步通信和异步通信
3. 系统之间的依赖关系 拆分标准，比如能否将一些有依赖的系统进行垂直化，使得这些系统的功能尽量的垂直
4. 避免系统之间的循环依赖
5. 水平拆分 垂直拆分

#### 四 数据库拆分
1. 垂直分区（分库）  --- 商品信息，用户信息，交易信息分别存储到不同的数据库中
2. 水平分区（分表/sharding）
3. 通用的DAL框架来屏蔽底层数据存储对应用逻辑的影响，使得底层数据的访问对应用透明化(TDDL)

####  五 异步通信
>异步通信，我们需要关注的一点是这里的异步一定是根据业务特点来的，一定是针对业务的异步，通常适合异步的场合是一些松耦合的通信场合，而对于本身业务上关联度比较大的业务系统之间，我们还是要采用同步通信比较靠谱

1. 同步通信的系统 必须同时做伸缩性提高
2. 同步调用还会影响到可用性
3. 系统之间异步通信以后可以大大提高系统的响应时间，使得每个请求的响应时间变短，从而提高用户体验，因此异步在提高了系统的伸缩性以及可用性的同时，也大大的增强了请求的响应时间
4. 下面我们就以淘宝的业务来看看异步在淘宝的具体应用。交易系统会与很多其它的业务系统交互，如果在一次交易过程中采用同步调用的话，这就要求要向交易成功，必须依赖的所有系统都可用，而如果采用异步通信以后，交易系 统借助于消息中间件Notify和 其它的系统进行了解耦，这样以来当其它的系统不可用的时候，也不会影响到某此交易，从而提高了系统的可用性

#### 六 非结构化数据存储 ( TFS,NOSQL)
1. 结构化数据，比如一些配置文件，一个用户对应的动态，以及一次交易的快照等信息，这些信息一般不适合保存到RDBMS中， 它们更符合一种Key-value的 结构
2. 还有一类数据，数据量非常的大，但是实时性要求不高。这些数据也需要通过另外的一种存储方式进行存储，另外一些静态文件，比如各个商品的图片，商品描述等信息，这些信息因为比较大，放入RDBMS会引起读取性能问题，从而影响到其它 的数据读取性能，因此这些信息也需要和其它信息分开存储
3. 我们都知道根据CAP理论，一致性，可用性和分区容错性3者 不能同时满足，最多只能同时满足两个，我们传统的关系数据采用了ACID的事务策略，而ACID的 事务策略更加讲究的是一种高一致性而降低了可用性的需求，但是互联网应用往往对可用性的要求要略高于一致性的需求，这个时候我们就需要避免采用数据的ACID事 务策略，转而采用BASE事 务策略，BASE事 务策略是基本可用性，事务软状态以及最终一致性的缩写，通过BASE事务策略，我们可以通过最终一致性来提升系统的可用性，这也是目前很多NOSQL产品所采用的策略，包括facebook 的cassandra,apache hbase,google bigtable等，这些产品非常适合一些非结构化的数据，比如key-value形 式的数据存储，并且这些产品有个很好的优点就是水平伸缩性。目前淘宝也在研究和使用一些成熟的NOSQL产品

#### 七 监控、预警系统
>Nagios zabbix

#### 八 配置统一管理
>Puppet

#### 分布式框架
>较有代表性的包括Twitter的Finagle（基于Scala语言），Flipkart（印度最大的B2C网站）的Phantom（文档较少），Apache的Tuscany（有点陈旧，而且不是很适合互联网公司）等等，其实国内也有少数公司提供了开源Java服务框架，但dubbo在其功能完善性、架构优雅性、使用简便性等方面依然有其相对独特的优势，尽管dubbo绝大部分的开发都是2012年以前完成的
