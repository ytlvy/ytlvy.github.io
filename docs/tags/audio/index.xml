<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Audio on My New Hugo Site</title>
    <link>http://ytlvy.com/tags/audio/</link>
    <description>Recent content in Audio on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 Aug 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://ytlvy.com/tags/audio/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Audio Basic Knowleage</title>
      <link>http://ytlvy.com/posts/2015-08-11/2015-08-11-audio-basic-knowleage/</link>
      <pubDate>Tue, 11 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ytlvy.com/posts/2015-08-11/2015-08-11-audio-basic-knowleage/</guid>
      <description>音频编码基础知识 自然界中的声音非常复杂，波形极其复杂，通常我们采用的是脉冲代码调制编码，即PCM编码。PCM通过抽样、量化、编码三个步骤将连续变化的模拟信号转换为数字编码。
什么是采样率和采样大小（位/bit）。 声音其实是一种能量波，因此也有频率和振幅的特征，频率对应于时间轴线，振幅对应于电平轴线。波是无限光滑的，弦线可以看成由无数点组成，由于存储空间是相对有限的，数字编码过程中，必须对弦线的点进行采样。采样的过程就是抽取某点的频率值，很显然，在一秒中内抽取的点越多，获取得频率信息更丰富，为了复原波形，一次振动中，必须有2个点的采样，人耳能够感觉到的最高频率为20kHz，因此要满足人耳的听觉要求，则需要至少每秒进行40k次采样，用40kHz表达，这个40kHz就是采样率。我们常见的CD，采样率为44.1kHz。光有频率信息是不够的，我们还必须获得该频率的能量值并量化，用于表示信号强度。量化电平数为2的整数次幂，我们常见的CD位16bit的采样大小，即2的16次方。采样大小相对采样率更难理解，因为要显得抽象点，举个简单例子：假设对一个波进行8次采样，采样点分别对应的能量值分别为A1-A8，但我们只使用2bit的采样大小，结果我们只能保留A1-A8中4个点的值而舍弃另外4个。如果我们进行3bit的采样大小，则刚好记录下8个点的所有信息。采样率和采样大小的值越大，记录的波形更接近原始信号。
有损和无损 根据采样率和采样大小可以得知，相对自然界的信号，音频编码最多只能做到无限接近，至少目前的技术只能这样了，相对自然界的信号，任何数字音频编码方案都是有损的，因为无法完全还原。在计算机应用中，能够达到最高保真水平的就是PCM编码，被广泛用于素材保存及音乐欣赏，CD、DVD以及我们常见的WAV文件中均有应用。因此，PCM约定俗成了无损编码，因为PCM代表了数字音频中最佳的保真水准，并不意味着PCM就能够确保信号绝对保真，PCM也只能做到最大程度的无限接近。我们而习惯性的把MP3列入有损音频编码范畴，是相对PCM编码的。强调编码的相对性的有损和无损，是为了告诉大家，要做到真正的无损是困难的，就像用数字去表达圆周率，不管精度多高，也只是无限接近，而不是真正等于圆周率的值。
###为什么要使用音频压缩技术
要算一个PCM音频流的码率是一件很轻松的事情，采样率值×采样大小值×声道数 bps。一个采样率为44.1KHz，采样大小为16bit，双声道的PCM编码的WAV文件，它的数据速率则为 44.1K×16×2 =1411.2 Kbps。我们常说128K的MP3，对应的WAV的参数，就是这个1411.2 Kbps，这个参数也被称为数据带宽，它和ADSL中的带宽是一个概念。将码率除以8,就可以得到这个WAV的数据速率，即176.4KB/s。这表示存储一秒钟采样率为44.1KHz，采样大小为16bit，双声道的PCM编码的音频信号，需要176.4KB的空间，1分钟则约为10.34M，这对大部分用户是不可接受的，尤其是喜欢在电脑上听音乐的朋友，要降低磁盘占用，只有2种方法，降低采样指标或者压缩。降低指标是不可取的，因此专家们研发了各种压缩方案。由于用途和针对的目标市场不一样，各种音频压缩编码所达到的音质和压缩比都不一样，在后面的文章中我们都会一一提到。有一点是可以肯定的，他们都压缩过。
频率与采样率的关系 采样率表示了每秒对原始信号采样的次数，我们常见到的音频文件采样率多为44.1KHz，这意味着什么呢？假设我们有2段正弦波信号，分别为20Hz和20KHz，长度均为一秒钟，以对应我们能听到的最低频和最高频，分别对这两段信号进行40KHz的采样，我们可以得到一个什么样的结果呢？结果是：20Hz的信号每次振动被采样了40K/20=2000次，而20K的信号每次振动只有2次采样。显然，在相同的采样率下，记录低频的信息远比高频的详细。这也是为什么有些音响发烧友指责CD有数码声不够真实的原因，CD的44.1KHz采样也无法保证高频信号被较好记录。要较好的记录高频信号，看来需要更高的采样率，于是有些朋友在捕捉CD音轨的时候使用48KHz的采样率，这是不可取的！这其实对音质没有任何好处，对抓轨软件来说，保持和CD提供的44.1KHz一样的采样率才是最佳音质的保证之一，而不是去提高它。较高的采样率只有相对模拟信号的时候才有用，如果被采样的信号是数字的，请不要去尝试提高采样率。</description>
    </item>
    
    <item>
      <title>Convert PCM To AAC</title>
      <link>http://ytlvy.com/posts/2015-08-11/2015-08-11-convert-pcm-to-aac/</link>
      <pubDate>Tue, 11 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ytlvy.com/posts/2015-08-11/2015-08-11-convert-pcm-to-aac/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/poechant/article/details/7435054&#34;&gt;reference&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;音频编解码-实战篇-1-pcm转至aac-aac编码&#34;&gt;音频编解码·实战篇（1）PCM转至AAC（AAC编码）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;作者：柳大·Poechant&lt;/li&gt;
&lt;li&gt;博客：blog.csdn.net/poechant&lt;/li&gt;
&lt;li&gt;邮箱：zhongchao.ustc@gmail.com&lt;/li&gt;
&lt;li&gt;日期：April 7th, 2012&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里利用FAAC来实现AAC编码。&lt;/p&gt;

&lt;h3 id=&#34;下载安装-faac&#34;&gt;下载安装 FAAC&lt;/h3&gt;

&lt;p&gt;这里的安装过程是在 Mac 和 Linux 上实现的，Windows可以类似参考。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://downloads.sourceforge.net/faac/faac-1.28.tar.gz
tar zxvf faac-1.28.tar.gz
cd faac-1.28
./configure
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果才用默认的 configure 中的 prefix path，那么安装后的 lib 和 .h 文件分别在/usr/local/lib和/usr/local/include，后面编译的时候会用到。&lt;/p&gt;

&lt;p&gt;如果编译过程中发现错误：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mpeg4ip.h:126: error: new declaration ‘char* strcasestr(const char*, const char*)’
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Wave And PCM Audio Format</title>
      <link>http://ytlvy.com/posts/2015-08-11/2015-08-11-wave-and-pcm-audio-format/</link>
      <pubDate>Tue, 11 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ytlvy.com/posts/2015-08-11/2015-08-11-wave-and-pcm-audio-format/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/poechant/article/details/7436710&#34;&gt;reference&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;音频编解码-格式篇-1-wave-pcm-audio-format-wav&#34;&gt;音频编解码·格式篇（1）Wave PCM audio format（WAV）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;作者：柳大·Poechant&lt;/li&gt;
&lt;li&gt;博客：Blog.CSDN.net/Poechant&lt;/li&gt;
&lt;li&gt;邮箱：zhongchao.ustc@gmail.com&lt;/li&gt;
&lt;li&gt;日期：April 6th, 2012&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;音频编解码基础&#34;&gt;音频编解码基础&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;采样率：声音信号在“模数转换”过程中单位时间内采样的次数。&lt;/li&gt;
&lt;li&gt;采样值：每一次采样周期内声音模拟信号的积分值。&lt;/li&gt;
&lt;li&gt;单声道：11.025 KHz 采样值，8 Bits 采样值（0x00 - 0xFF）。&lt;/li&gt;
&lt;li&gt;双声道：44.1 KHz 采样值，16 Bits 采样值。高八位表示左声道，低八位表示右声道。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;wav音频文件格式&#34;&gt;WAV音频文件格式&lt;/h3&gt;

&lt;p&gt;见下图：
&lt;img src=&#34;http://img.my.csdn.net/uploads/201204/08/1333820202_8901.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;1) 文件头&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RIFF/WAV 文件标识段&lt;/li&gt;
&lt;li&gt;声音数据格式说明段&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2) 数据体：由 PCM（脉冲编码调制）格式表示的样本组成。&lt;/p&gt;

&lt;p&gt;单声道 WAV 文件中，声道0代表左声道，声道1代表右声道；多声道 WAV 文件中，左右声道的样本是交替出现的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Music Background Play And Lock Screen Image</title>
      <link>http://ytlvy.com/posts/2015-08-11/2015-08-11-ios-music-background-play-and-lock-screen-image/</link>
      <pubDate>Tue, 11 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ytlvy.com/posts/2015-08-11/2015-08-11-ios-music-background-play-and-lock-screen-image/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/zsk_zane/article/details/47320621&#34;&gt;reference&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ios-音乐后台播放及锁屏信息显示&#34;&gt;iOS 音乐后台播放及锁屏信息显示&lt;/h2&gt;

&lt;p&gt;实现音乐的后台播放，以及播放时，可以控制其暂停，下一首等操作，以及锁屏图片歌曲名等的显示
此实例需要真机调试，效果图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://img.blog.csdn.net/20150806175143383&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;工程下载：&lt;a href=&#34;https://github.com/Nongchaozhe/MusicRemoteControl&#34;&gt;github工程下载&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;实现步骤&#34;&gt;实现步骤：&lt;/h3&gt;

&lt;p&gt;1) 首先修改info.plist&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://img.blog.csdn.net/20150806174938474&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2) 其次引入两个需要的框架&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &amp;lt;AVFoundation/AVFoundation.h&amp;gt;
#import &amp;lt;MediaPlayer/MediaPlayer.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3) 设置播放器及后台播放&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
    [super viewDidLoad];
//    设置后台播放
    [[AVAudioSession sharedInstance] setCategory:AVAudioSessionCategoryPlayback error:nil];

//    设置播放器
    NSURL *url = [NSURL fileURLWithPath:[[NSBundle mainBundle] pathForResource:@&amp;quot;那些花儿&amp;quot; ofType:@&amp;quot;mp3&amp;quot;] ];
    _player = [[AVPlayer alloc] initWithURL:url];
    [_player play];
    _isPlayingNow = YES;

    //后台播放显示信息设置
    [self setPlayingInfo];
}

#pragma mark - 接收方法的设置
- (void)remoteControlReceivedWithEvent:(UIEvent *)event {
    if (event.type == UIEventTypeRemoteControl) {  //判断是否为远程控制
        switch (event.subtype) {
            case  UIEventSubtypeRemoteControlPlay:
                if (!_isPlayingNow) {
                    [_player play];
                }
                _isPlayingNow = !_isPlayingNow;
                break;
            case UIEventSubtypeRemoteControlPause:
                if (_isPlayingNow) {
                    [_player pause];
                }
                _isPlayingNow = !_isPlayingNow;
                break;
            case UIEventSubtypeRemoteControlNextTrack:
                NSLog(@&amp;quot;下一首&amp;quot;);
                break;
            case UIEventSubtypeRemoteControlPreviousTrack:
                NSLog(@&amp;quot;上一首 &amp;quot;);
                break;
            default:
                break;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>